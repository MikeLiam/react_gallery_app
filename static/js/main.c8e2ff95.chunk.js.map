{"version":3,"sources":["images/moto.png","config.js","Context/index.js","Components/SearchForm.js","Components/MainNav.js","Components/Photo.js","Components/NoPhoto.js","Components/PhotoContainer.js","Components/FourOuFour.js","Components/FrontImage.js","Components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","apiKey","ReactGalleryAppContext","React","createContext","Provider","state","searchContainer","topic","photos","loading","noResults","handleLoading","setState","performSearch","query","index","findIndex","search","split","join","length","axios","get","then","response","data","photo","prevState","container","collection","splice","catch","error","console","log","value","this","actions","onSearch","props","children","Component","Consumer","SearchForm","searchText","onSearchChange","e","target","handleSubmit","history","preventDefault","path","push","currentTarget","reset","withRouter","MainNav","className","to","Photo","steps","farm","server","id","secret","handlePhoto","previousY","previousRatio","handleViewPhoto","IntersectionObserver","entries","forEach","entry","currentY","boundingClientRect","y","currentRatio","intersectionRatio","isIntersecting","threshold","Array","fill","map","_","as","onChange","inView","observe","src","alt","onClick","NoPhoto","PhotoContainer","component","navLink","key","FourOuFour","FrontImage","handleButtons","tagName","action","button","closest","show","handleImage","style","backgroundImage","type","Loading","Moto","App","futureLiImage","liImage","document","getElementById","previousElementSibling","parentNode","lastElementChild","nextElementSibling","firstElementChild","querySelector","frontImage","image","imageId","listenHistory","pathname","location","context","updateSearchUrl","listen","exact","render","match","params","contextType","Boolean","window","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c8e2ff95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/moto.d8b74ad1.png\";","const apiKey = '431e6bc1a79a3b98d436a8714fe19989';\nexport default apiKey;","import React, {\n  Component\n} from 'react';\nimport axios from 'axios';\n// apikey provided from Flickr\nimport apiKey from '../config';\n\n// Create context\nexport const ReactGalleryAppContext = React.createContext();\n// Context provider\nexport class Provider extends Component {\n  // default topics and loading/noresults management\n  state = {\n    searchContainer: [{\n        topic: \"yamaha tracer\",\n        photos: []\n      },\n      {\n        topic: \"kawasaki versys\",\n        photos: []\n      },\n      {\n        topic: \"bmw gs\",\n        photos: []\n      },\n      {\n        topic: \"ducati multistrada\",\n        photos: []\n      }\n    ],\n    loading: false,\n    noResults: false\n  };\n\n  // Set loading state\n  handleLoading = (loading) => {\n    this.setState({loading})\n  }\n\n  // Fetch query/topic\n  performSearch = (query) => {\n    // if already in state\n    const index = this.state.searchContainer.findIndex(search => search.topic.split(\" \").join(\"\") === query.split(\" \").join(\"\"));\n\n    if (index === -1 || (index !== -1 && this.state.searchContainer[index].photos.length === 0)) {\n      // if not already in state or already in state but void data, set loading state to true and fetch with axios module\n      this.setState({\n        loading: true\n      }, () => {\n        // fetch with api url configuration\n        axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n          .then(response => {\n            const data = response.data.photos.photo\n            // if there is results\n            if(data.length > 0) {\n              // if already in state (predefined or searched previously)\n              if (index !== -1) {\n                this.setState(prevState => {\n                  let container = [...prevState.searchContainer];\n                  let collection = prevState.searchContainer[index];\n                  collection.photos = data;\n                  container.splice(index, 1, collection);\n                  return {\n                    searchContainer: container,\n                    loading: false, noResults: false\n                  }\n                });\n              } else {\n                // If new topic\n                this.setState(prevState => {\n                  let collection = {};\n                  collection.photos = data;\n                  if (query) {\n                    collection.topic = query\n                  }\n\n                  return {\n                    searchContainer: [...prevState.searchContainer, collection],\n                    loading: false, noResults: false\n                  }\n                });\n                \n              }} else {\n                // if there isn't results set end loading and noresults tracing\n                this.setState(prevState => {\n                  return {loading:false, noResults: true}\n                })\n              }\n          })\n          .catch(error => console.log('Error fetching and parsing data', error));\n\n      })\n\n    }\n\n  }\n  render() {\n    return ( \n      <ReactGalleryAppContext.Provider value = {\n          {\n            searchContainer: this.state.searchContainer,\n            loading: this.state.loading,\n            noResults: this.state.noResults,\n            actions: {\n              onSearch: this.performSearch,\n              loading: this.handleLoading,\n            }\n          }\n        } > {\n          this.props.children\n        } </ReactGalleryAppContext.Provider>\n      )\n    }\n  }\n\n  export const Consumer = ReactGalleryAppContext.Consumer;","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { Consumer } from '../Context';\n\nclass SearchForm extends Component {\n\n    state = {\n        searchText: ''\n      }\n      /**\n       * Set state for searching value\n       * @param {Objet} e input onchange event\n       */\n      onSearchChange = (e) => {\n        this.setState({ searchText: e.target.value });\n      }\n      \n      /**\n       * \n       * @param {Object} e form on submit event\n       * @param {Function} onSearch context onsearch function\n       */\n      handleSubmit = (e, onSearch) => {\n        // get history for pushing new url\n        const { history} = this.props;\n        // prevent refresh\n        e.preventDefault();\n        // get search value\n        let query = this.query.value;\n        // fetch data\n        onSearch(query);\n        // push new url in history\n        let path = `/gallery/${query.split(\" \").join(\"\")}`;\n        history.push(path);\n        // reset input text\n        e.currentTarget.reset();\n      }\n      \n      /**\n       * Render function\n       */\n      render() {  \n        return (\n          // Context consumer to use fetching function\n          <Consumer>\n            {\n              ({actions}) => (\n                <form className=\"search-form\" onSubmit={ (e) => this.handleSubmit(e, actions.onSearch)} >\n                    <input type=\"search\" \n                        onChange={this.onSearchChange}\n                        name=\"search\" \n                        ref={(input) => this.query = input}\n                        placeholder=\"Search\"\n                        required />\n                    <button type=\"submit\" id=\"submit\" className=\"search-button\">\n                        <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n                            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n                        </svg>\n                    </button>\n                </form>     \n              )\n            }\n          </Consumer> \n        );\n      }\n    }\n\nexport default withRouter(SearchForm);","import React from 'react';\nimport {  NavLink } from 'react-router-dom';\n\n/**\n * MainNav component for NavLinks with predefined topics\n */\nconst MainNav = () => (\n    <div>\n        <nav className=\"main-nav\">\n            <ul >\n                <li><NavLink to=\"/gallery/yamahatracer\" >Yamaha Tracer</NavLink></li>\n                <li><NavLink to=\"/gallery/kawasakiversys\" >Kawasaki Versys</NavLink></li>\n                <li><NavLink to=\"/gallery/bmwgs\">BMW<br></br> GS</NavLink></li>\n                <li><NavLink to=\"/gallery/ducatimultistrada\">Ducati Multistrada</NavLink></li>\n            </ul>    \n        </nav>\n    </div>\n);\n\nexport default MainNav;","import React from 'react';\nimport { InView } from \"react-intersection-observer\";\n\n/**\n * \n * @param {Object} param0 props passed by\n */\nconst Photo = ( { farm, server, id, secret, handlePhoto } ) => {\n  // Array with sampling range to show/vanish at intersection of viewport and <li> images. Range from 0 to 1 divied in steps fractions\n  const thresholdArray = (steps) => Array(steps + 1)\n                                          .fill(0)\n                                          .map((_, index) => index / steps || 0)\n // Help manage if scroll down or up\n let previousY = 0\n let previousRatio = 0\n \n /**\n  * Handle showing of vanishing <li> elements if go in or out of viewport\n  * @param {Object} entries entries <Li> elements intersecting with viewport\n  */\n const handleIntersect = entries => {\n   entries.forEach(entry => {\n     const currentY = entry.boundingClientRect.y\n     const currentRatio = entry.intersectionRatio\n     const isIntersecting = entry.isIntersecting\n      const target = entry.target;\n     // Scrolling down/up\n     if (currentY < previousY && isIntersecting) {\n       if (currentRatio > previousRatio) {\n         // Scrolling down enter\n        target.className= \"slide-in active\";\n       } else {\n         // Scrolling down leave\n         target.className= \"slide-in vanish-up\"\n       }\n     } else if (currentY > previousY && isIntersecting) {\n       if (currentRatio < previousRatio) {\n         // Scrolling up leave\n         target.className= \"slide-in\"\n       } else {\n         // Scrolling up enter  \n         target.className= \"slide-in active\"\n       }\n     }\n     // Set current y axis as previous for future calls\n     previousY = currentY\n     previousRatio = currentRatio\n   })\n }\n\n // Asynchronously observe changes in the intersection of a <li> with a top-level document's viewport. Options, sampling range Array.\n const handleViewPhoto = new IntersectionObserver(handleIntersect, { threshold: thresholdArray(5) })\n \n\n  return (\n      <InView as=\"li\"  id={id} className={\"slide-in\"} onChange={ (inView, entry) => handleViewPhoto.observe(entry.target)} >\n          <img \n            src={`https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`} \n            alt=\"\"\n            onClick={(e) => handlePhoto(e.target, true, \"open\", id)}/>\n      </InView>\n  );\n}\n\nexport default Photo;\n","import React from 'react';\n\nconst NoPhoto = props => (\n  <div className=\"cartel\">\n    <div className='not-found dead-end'>\n      <div className=\"bar\"></div>\n    </div>\n    <h3>You hit a Dead End</h3>\n  </div>\n);\n\nexport default NoPhoto;","import React from 'react';\n\nimport {Consumer} from '../Context';\n\nimport Photo from './Photo';\nimport NoPhoto from './NoPhoto'\n\n\nconst PhotoContainer = (props) =>  { \n\n  return(\n    <div>\n      <div className=\"photo-container\">\n          <h2>Results</h2>\n          <ul>\n            {/* Context consumer for data info and noresult tracing */}\n            <Consumer>\n                { ({searchContainer, noResults}) => {\n                  let topic = props.topic;\n                  let component ;\n                  let photos\n                  let index\n                  // search if topic was searched \n                  index = searchContainer.findIndex(navLink => navLink.topic.split(\" \").join(\"\") === topic.split(\" \").join(\"\"));\n                  if(index !== -1) {\n                    // For every photo on topic\n                    photos = searchContainer[index].photos;\n                        component = photos.map( photo => (\n                          <Photo\n                              farm={photo.farm}\n                              secret={photo.secret}\n                              server={photo.server}\n                              id={photo.id}\n                              key={photo.id}\n                              handlePhoto={ props.handlePhoto }/>\n                        ));\n                        return component\n                  } \n                  // if no results from fetching show NoPhoto component, else show component set with photos\n                  return noResults?  <NoPhoto /> : component\n                }}\n          </Consumer>\n          </ul> \n      </div>\n          \n    </div>\n  );\n}       \n\n\nexport default PhotoContainer;\n","import React from 'react';\n\nconst FourOuFour = props => (\n  <div className='e-404'>\n  <div className=\"sign inside\">\n      <h3>Exit 404</h3>\n      <p>Road to nowhere found</p>\n  </div>\n</div>\n);\n\nexport default FourOuFour;","import React, { Component } from 'react'\n\nclass FrontImage extends Component {\n\n    /**\n     * Handler for next, prev & close onclick button\n     * @param {Object} e onClick object event\n     */\n    handleButtons = (e) => {\n        // Event delegation from elements with tags button or insider strong and I (arrows)\n        if (e.target.tagName === 'BUTTON' || e.target.tagName === 'STRONG' || e.target.tagName === 'I') {\n            // Get closest button element\n            const button = e.target.closest('button')\n            // set default vars\n            let target = null;\n            let show = true;\n            let action;\n            let id = this.props.id\n            // set action\n            if (button.id === \"modal-prev-btn\") {\n                action = \"prev\";\n            } else if (button.id === \"modal-next-btn\") {\n                action = \"next\";\n            } else {\n                action = \"close\";\n                // if close action get closest modal div container for close it\n                target = button.closest('div.modal-container');\n                show = false;\n                id = null;\n            }\n            // Call main App handler function\n            this.props.handleImage(target, show, action, id);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal-container\" onClick={(e) => this.handleButtons(e)}>\n                <div className=\"modal\" style={{backgroundImage: `url(${this.props.src})`}}>\n                    <button type=\"button\" id=\"modal-close-btn\" className=\"modal-close-btn\" ><strong>X</strong></button>\n                    <button type=\"button\" id=\"modal-prev-btn\" className=\"modal-arrow-btn prev\"  ><i className=\"modal-arrow left\"></i></button>\n                    <button type=\"button\" id=\"modal-next-btn\"  className=\"modal-arrow-btn next\" ><i className=\"modal-arrow right\"></i></button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FrontImage;","import React from 'react'\nimport Moto from '../images/moto.png'\n\nconst Loading = ( props ) => {\n    return (\n        <div className=\"loading\">\n            {/* loading spinner */}\n            <img className=\"moto\" src={Moto} alt=\"moto\"/>\n            <h2>Loading...</h2>\n        </div>\n    );\n}\n\nexport default Loading;","import React, { Component } from 'react';\nimport {\n  Route,\n  Switch,\n  withRouter,\n  Redirect\n} from 'react-router-dom';\n\n\nimport { ReactGalleryAppContext } from './Context'\nimport SearchForm from './Components/SearchForm';\nimport MainNav from './Components/MainNav';\nimport PhotoContainer from './Components/PhotoContainer';\nimport FourOuFour from './Components/FourOuFour'\nimport FrontImage from './Components/FrontImage'\nimport Loading from './Components/Loading'\n\nclass App extends Component {\n\n  // Set context App for calls outside render() function\n  static contextType = ReactGalleryAppContext;\n  // Set state for image viewer modal and history tracing\n  constructor() {\n    super();\n    this.state = {    \n      frontImage: false,\n      image: \"\",\n      imageId: \"\",\n      listenHistory: false\n    };\n    }\n  \n  /**\n   * Call context onSearch function to get topic' data of the url in case goBack browser after refresh page\n   */ \n  updateSearchUrl() {\n    // Only if there is a navigation history and not only just landing page\n    if (this.props.history.length > 2) {\n      const pathname = this.props.location.pathname.split('/');\n      if(pathname.findIndex(path => path === \"gallery\") === 1 ) {\n        const topic = pathname[2];\n        this.context.actions.onSearch(topic);\n      }\n    } \n  }\n  //\n  /**\n   * Fetch navlinks predefined topics and manage navigation history\n   */ \n  componentDidMount() {\n    this.context.searchContainer.forEach( search => this.context.actions.onSearch(search.topic));\n    // If first time in page or after refresh page\n    if (!this.state.listenHistory) {\n      // Call for fetch data if refresh page\n      this.updateSearchUrl();\n      // Set state for future navigation\n      this.setState({listenHistory: true})\n    }\n    // History listener instanciate\n    this.props.history.listen((location, action) => {\n      this.updateSearchUrl()\n    });\n  }\n\n  /**\n   * Handel image viewer modal (open, close, next image, previous image)\n   * @param {HTMLElement} target Image to show in modal\n   * @param {Boolean} show true for showing false for closing\n   * @param {String} action respective open, close, next image, previous image options\n   * @param {Int} id <Li> element id for manage next prev images\n   */\n  handleImage = (target,show, action, id) => {\n    let src;\n    // For prev next options\n    if (action !== \"open\" && action !== \"close\") {\n        let futureLiImage;\n        //  get <Li> element by id\n        const liImage = document.getElementById(`${id}`);\n        if (action === \"prev\") {\n          // if previous image option get prev <Li> element\n          futureLiImage = liImage.previousElementSibling;\n            // if we are in first <Li> element, prev lement is null so go to last <li> element\n            if (futureLiImage === null) {\n              futureLiImage = liImage.parentNode.lastElementChild\n            } \n            \n          } else if (action === \"next\") {\n            // if next image get next <Li> element\n            futureLiImage = liImage.nextElementSibling;\n            // if last and no more sibling, take first\n            if (futureLiImage === null) {\n              futureLiImage = liImage.parentNode.firstElementChild\n            } \n          }\n          // Set src from image\n          src = futureLiImage.querySelector('img').src\n          // set id for future actions\n          id = futureLiImage.id;\n        } else if (action === \"open\") {\n          // for open action set src from target clicked\n        src = target.src\n      }\n      // Set state if has to show image viewer modal, image src if show or none, imageId if show or none\n      this.setState({frontImage: show, image: (show ? src : \"\"), imageId: (show ? id : \"\")})\n  }\n\n  /**\n   * Render function\n   */\n  render() {\n    return (\n      <div className=\"container\" >\n\n        <SearchForm />\n\n        <MainNav />\n              {\n                this.context.loading \n                ? (<Loading />)\n                : (\n                  <Switch>\n                    \n                    <Route exact path=\"/\" render={ () => <Redirect to=\"/gallery/yamahatracer\"/>}/>\n                    <Route path=\"/gallery/:topic\" render={ (props) => <PhotoContainer topic={props.match.params.topic}  handlePhoto={this.handleImage}/> }/>\n                    <Route component={FourOuFour} />\n                  </Switch>\n                  )\n                }\n                { this.state.frontImage && <FrontImage src={this.state.image} id={this.state.imageId} handleImage={this.handleImage}/>}\n\n        \n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from './Context';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}